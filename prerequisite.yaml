---
- name: setup prerequisite jobs on every node
  hosts: nodes
  become: yes
  gather_facts: yes

  tasks:
    - name: check the servers' os version
      when: >
        (ansible_distribution != 'Ubuntu')

        or

        (ansible_distribution_version != '20.04')
      meta: end_play

    - name: setup master node
      when:
        - admin is not defined
      meta: end_play

    - name: Disable SWAP since kubernetes can't work with swap enabled (1/2)
      shell: swapoff -a
      register: output

    - name: Disable SWAP in fstab since kubernetes can't work with swap enabled (2/2)
      replace:
        path: /etc/fstab
        regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
        replace: '# \1'
      register: output

# reference : https://germaniumhq.com/2019/02/14/2019-02-14-Disabling-Swap-for-Kubernetes-in-an-Ansible-Playbook/

    - name: prevent package auto upgrade (1)
      replace:
        path: /etc/apt/apt.conf.d/20auto-upgrades
        regexp: 'APT::Periodic::Update-Package-Lists "1";'
        replace: 'APT::Periodic::Update-Package-Lists "0";'
      register: output

    - name: prevent package auto upgrade (2)
      replace:
        path: /etc/apt/apt.conf.d/20auto-upgrades
        regexp: 'APT::Periodic::Unattended-Upgrade "1";'
        replace: 'APT::Periodic::Unattended-Upgrade "0";'
      register: output

    - name: install basic packages
      apt:
        pkg:
          - net-tools
          - nfs-common
        state: present
      register: output

    - name: disable ufw
      ufw:
        state: disabled
      register: output

    - name: stop ufw
      service:
        name: ufw
        state: stopped
        enabled: false
      register: output

    - name: download packages for docker installation
      apt:
        pkg:
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present
      register: output

    - name: check if /etc/apt/keyrings exists
      stat:
        path: /etc/apt/keyrings
      register: stat_result

    - name: create /etc/apt/keyrings
      file:
        path: /etc/apt/keyrings
        state: directory
      when: not stat_result.stat.exists
      register: output

    - name: Add Docker GPG apt Key
      shell: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg

    - name: Add Docker Repository (1)
      file:
        path: /etc/apt/sources.list.d/docker.list
        state: touch

    - name: Add Docker Repository (2)
      shell: echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

    - name: install docker
      apt:
        pkg:
          - docker-ce=5:19.03.15~3-0~ubuntu-focal
          - docker-ce-cli=5:19.03.15~3-0~ubuntu-focal
          - containerd.io
          - docker-compose-plugin
        state: present
        update_cache: true

    - name: copy daemon.json to master
      copy:
        src: files/daemon.json
        dest: /etc/docker/daemon.json
        mode: 0644
      register: output

    - name: check if /etc/systemd/system/docker.service.d exists
      stat:
        path: /etc/systemd/system/docker.service.d
      register: stat_result

    - name: create /etc/systemd/system/docker.service.d
      file:
        path: /etc/systemd/system/docker.service.d
        state: directory
      when: not stat_result.stat.exists
      register: output

    - name: restart docker daemon
      systemd:
        state: restarted
        daemon_reload: yes
        name: docker
      register: output

    - name: check if /etc/modules-load.d/k8s.conf exists
      stat:
        path: /etc/modules-load.d/k8s.conf
      register: stat_result

    - name: create /etc/modules-load.d/k8s.conf
      file:
        path: /etc/modules-load.d/k8s.conf
        state: touch
      when: not stat_result.stat.exists
      register: output

    - name: letting iptables see bridged traffic (1)
      lineinfile:
        path: /etc/modules-load.d/k8s.conf
        line: br_netfilter
      register: output

    - name: check if /etc/sysctl.d/k8s.conf exists
      stat:
        path: /etc/sysctl.d/k8s.conf
      register: stat_result

    - name: create /etc/sysctl.d/k8s.conf
      file:
        path: /etc/sysctl.d/k8s.conf
        state: touch
      when: not stat_result.stat.exists
      register: output

    - name: letting iptables see bridged traffic (2)
      blockinfile:
        path: /etc/sysctl.d/k8s.conf
        block: |
          net.bridge.bridge-nf-call-iptables = 1
          net.bridge.bridge-nf-call-ip6tables = 1
      register: output

    - name: reload system kernel params
      command: sysctl --system
      register: output

    - name: download k8s apt-key.gpg
      get_url:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        dest: /usr/share/keyrings/kubernetes-archive-keyring.gpg
        mode: 0644
      register: output

    - name: check if /etc/apt/sources.list.d/kubernetes.list exists
      stat:
        path: /etc/apt/sources.list.d/kubernetes.list
      register: stat_result

    - name: create /etc/apt/sources.list.d/kubernetes.list
      file:
        path: /etc/apt/sources.list.d/kubernetes.list
        state: touch
      when: not stat_result.stat.exists
      register: output

    - name: add k8s package repository
      blockinfile:
        path: /etc/apt/sources.list.d/kubernetes.list
        block: |
          deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main
      register: output

    - name: install kubelet / kubeadm / kubectl
      apt:
        pkg:
          - kubelet=1.20.11-00
          - kubeadm=1.20.11-00
          - kubectl=1.20.11-00
        state: present
        update_cache: yes
      register: output

    - name: apt-mark hold kubeadm
      dpkg_selections:
        name: kubeadm
        selection: hold
      register: output

    - name: apt-mark hold kubelet
      dpkg_selections:
        name: kubelet
        selection: hold
      register: output

    - name: apt-mark hold kubectl
      dpkg_selections:
        name: kubectl
        selection: hold
      register: output

    - name: enable kubectl auto completion for root
      blockinfile:
        path: $HOME/.bashrc
        block: |
          source <(kubectl completion bash)
          source <(kubeadm completion bash)
      register: output

    - name: enable kubectl auto completion for admin
      become_user: "{{ admin }}"
      blockinfile:
        path: $HOME/.bashrc
        block: |
          source <(kubectl completion bash)
          source <(kubeadm completion bash)
      register: output
