- name: Disable SWAP since kubernetes can't work with swap enabled (1/2)
  shell: swapoff -a
  register: output

- name: Disable SWAP in fstab since kubernetes can't work with swap enabled (2/2)
  replace:
    path: /etc/fstab
    regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
    replace: '# \1'
  register: output

# reference : https://germaniumhq.com/2019/02/14/2019-02-14-Disabling-Swap-for-Kubernetes-in-an-Ansible-Playbook/

- name: prevent package auto upgrade
  replace:
    path: /etc/apt/apt.conf.d/20auto-upgrades
    regexp: 'APT::Periodic::Update-Package-Lists "1";'
    replace: 'APT::Periodic::Update-Package-Lists "0";'
  register: output

- name: install basic packages
  apt:
    pkg:
      - net-tools
      - nfs-common
      - tmux
    state: present
    update_cache: yes
  register: output

- name: disable ufw
  ufw:
    state: disabled
  register: output

- name: stop ufw
  service:
    name: ufw
    state: stopped
    enabled: false
  register: output

- name: copy docker installation script to master
  become_user: "{{ master_user }}"
  copy:
    src: ../files/install_docker_ubuntu.sh
    dest: $HOME
    mode: 0777
  register: output

- name: install packages for docker installation
  apt:
    pkg:
      - ca-certificates
      - curl
      - gnupg
      - lsb-release
  register: output

- name: check if /etc/apt/keyrings exists
  stat:
    path: /etc/apt/keyrings
  register: stat_result

- name: create /etc/apt/keyrings
  file:
    path: /etc/apt/keyrings
    state: directory
  when: not stat_result.stat.exists
  register: output

- name: download docker gpg key
  get_url:
    url: https://download.docker.com/linux/ubuntu/gpg
    dest: /etc/apt/keyrings/docker.gpg
    mode: 0777
  register: output

- name: add docker package repository
  blockinfile:
    path: /etc/apt/sources.list.d/docker.list
    block: |
      deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu focal stable
  register: output

- name: install docker
  apt:
    pkg:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-compose-plugin
    update_cache: yes
    state: present
  register: output

- name: copy daemon.json to master
  copy:
    src: ../files/daemon.json
    dest: /etc/docker/daemon.json
    mode: 0644
  register: output

- name: check if /etc/systemd/system/docker.service.d exists
  stat:
    path: /etc/systemd/system/docker.service.d
  register: stat_result

- name: create /etc/systemd/system/docker.service.d
  file:
    path: /etc/systemd/system/docker.service.d
    state: directory
  when: not stat_result.stat.exists
  register: output

- name: restart docker daemon
  systemd:
    state: restarted
    daemon_reload: yes
    name: docker
  register: output

- name: check if /etc/modules-load.d/k8s.conf exists
  stat:
    path: /etc/modules-load.d/k8s.conf
  register: stat_result

- name: create /etc/modules-load.d/k8s.conf
  file:
    path: /etc/modules-load.d/k8s.conf
    state: touch
  when: not stat_result.stat.exists
  register: output

- name: letting iptables see bridged traffic (1)
  lineinfile:
    path: /etc/modules-load.d/k8s.conf
    line: br_netfilter
  register: output

- name: check if /etc/sysctl.d/k8s.conf exists
  stat:
    path: /etc/sysctl.d/k8s.conf
  register: stat_result

- name: create /etc/sysctl.d/k8s.conf
  file:
    path: /etc/sysctl.d/k8s.conf
    state: touch
  when: not stat_result.stat.exists
  register: output

- name: letting iptables see bridged traffic (2)
  blockinfile:
    path: /etc/sysctl.d/k8s.conf
    block: |
      net.bridge.bridge-nf-call-iptables = 1
      net.bridge.bridge-nf-call-ip6tables = 1
  register: output

- name: reload system kernel params
  command: sysctl --system
  register: output

- name: download k8s apt-key.gpg
  get_url:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    dest: /usr/share/keyrings/kubernetes-archive-keyring.gpg
    mode: 0644
  register: output

- name: check if /etc/apt/sources.list.d/kubernetes.list exists
  stat:
    path: /etc/apt/sources.list.d/kubernetes.list
  register: stat_result

- name: create /etc/apt/sources.list.d/kubernetes.list
  file:
    path: /etc/apt/sources.list.d/kubernetes.list
    state: touch
  when: not stat_result.stat.exists
  register: output

- name: add k8s package repository
  blockinfile:
    path: /etc/apt/sources.list.d/kubernetes.list
    block: |
      deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main
  register: output

- name: install kubelet / kubeadm / kubectl
  apt:
    pkg:
      - kubelet=1.20.11-00
      - kubeadm=1.20.11-00
      - kubectl=1.20.11-00
    update_cache: yes
    state: present
  register: output

- name: apt-mark hold kubeadm
  dpkg_selections:
    name: kubeadm
    selection: hold
  register: output

- name: apt-mark hold kubelet
  dpkg_selections:
    name: kubelet
    selection: hold
  register: output

- name: apt-mark hold kubectl
  dpkg_selections:
    name: kubectl
    selection: hold
  register: output

- name: check if k8s script exists (1)
  stat:
    path: "/home/{{ master_user }}/k8s_log.sh"
  register: stat_result

- name: create k8s installation scripts (1)
  file:
    path: "/home/{{ master_user }}/k8s_log.sh"
    state: touch
    mode: 0777
  when: not stat_result.stat.exists
  register: output

- name: check if k8s script exists (2)
  stat:
    path: "/home/{{ master_user }}/k8s_join_master.sh"
  register: stat_result

- name: create k8s installation scripts (2)
  file:
    path: "/home/{{ master_user }}/k8s_join_master.sh"
    state: touch
    mode: 0777
  register: output

- name: check if k8s script exists (3)
  stat:
    path: "/home/{{ master_user }}/k8s_join_worker.sh"
  register: stat_result

- name: create k8s installation scripts (3)
  file:
    path: "/home/{{ master_user }}/k8s_join_worker.sh"
    state: touch
    mode: 0777
  register: output

- name: kubeadm init
  command: "kubeadm init --control-plane-endpoint {{ master_ip }}:6443 --upload-certs --pod-network-cidr \"10.244.0.0/16\" > /home/{{ master_user }}/k8s_log.sh"
  register: output

- name: add join master command in its script
  blockinfile:
    path: $HOME/k8s_join_master.sh
    block: |
      #!/bin/bash
      $(sed -n '/kubeadm join/,/control/p' /home/$user_name/k8s_log.sh | head -n 3)
  register: output


- name: install kubelet / kubeadm / kubectl
  apt:
    pkg:
      - kubelet=1.20.11-00
      - kubeadm=1.20.11-00
      - kubectl=1.20.11-00
    update_cache: yes
    state: present
  register: output

- name: apt-mark hold kubelet / kubeadm / kubectl
  dpkg_selections:
    name:
      - kubeadm
      - kubelet
      - kubectl
    selection: hold
  register: output

- name: create k8s install scripts
  become_user: "{{ master_user }}"
  file:
    path:
      - $HOME/k8s_log.sh
      - $HOME/k8s_join_master.sh
      - $HOME/k8s_join_worker.sh
    state: touch
    mode: 0777
  register: output

- name: kubeadm init
  become_user: "{{ master_user }}"
  command: "kubeadm init --control-plane-endpoint {{ master_ip }}:6443 --upload-certs --pod-network-cidr \"10.244.0.0/16\" >> $HOME/k8s_log.sh"
  register: output

- name: add join master command in its script
  blockinfile:
    path: $HOME/k8s_join_master.sh
    block: |
      #!/bin/bash
      $(sed -n '/kubeadm join/,/control/p' /home/$user_name/k8s_log.sh | head -n 3)
  register: output

- name: add join worker command in its script
  blockinfile:
    path: $HOME/k8s_join_worker.sh
    block: |
      #!/bin/bash
      $(sed -n '/kubeadm join/,/control/p' /home/$user_name/k8s_log.sh | tail -n 2)
  register: output

- name: check if /home/{master_user}/.kube exists
  stat:
    path: "/home/{{ master_user }}/.kube"
  register: stat_result

- name: create .kube directory
  become_user: "{{ master_user }}"
  file:
    path: $HOME/.kube
    state: directory
  when: not stat_result.stat.exists
  register: output

- name: copy /etc/kubernetes/admin.conf as /home/$user_name/.kube/config and change owner
  become_user: "{{ master_user }}"
  copy:
    src: /etc/kubernetes/admin.conf
    dest: $HOME/.kube/config
    owner: "{{ master_user }}"
    group: "{{ master_user }}"
    delegate_to: master
  register: output

- name: enable kubectl auto completion for administrator
  become_user: "{{ master_user }}"
  blockinfile:
    path: $HOME/.bashrc
    block: |
      source <(kubectl completion bash)
      source <(kubeadm completion bash)
  register: output

- name: enable kubectl auto completion for root
  blockinfile:
    path: $HOME/.bashrc
    block: |
      source <(kubectl completion bash)
      source <(kubeadm completion bash)
  register: output

- name: apply administrator's .bashrc
  become_user: "{{ master_user }}"
  command: source $HOME/.bashrc
  register: output

- name: apply root's .bashrc
  command: source $HOME/.bashrc
  register: output

- name: install flannel
  command: kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
  register: output

- name: download helm installation script
  become_user: "{{ master_user }}"
  get_url:
    url: https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
    dest: $HOME/get_helm.sh
    mode: 0777
  register: output

- name: install helm
  become_user: "{{ master_user }}"
  script: $HOME/get_helm.sh
  register: output
