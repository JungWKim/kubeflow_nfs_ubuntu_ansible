---
- name: install k8s on ubuntu 20.04 using docker engine
  hosts: master
  become: yes
  gather_facts: yes
  vars:
    admin: gpuadmin
    master_ip: 192.168.1.47

  tasks:
    - name: check the servers' os version
      when: >
        (ansible_distribution != 'Ubuntu')

        or

        (ansible_distribution_version != '20.04')
      meta: end_play

    - name: setup master node
      when:
        - admin is not defined
        - master_ip is not defined
      meta: end_play    

    - name: check if k8s log file exists
      stat:
        path: "/home/{{ admin }}/k8s_log.sh"
      register: stat_result

    - name: create k8s log file
      file:
        path: "/home/{{ admin }}/k8s_log.sh"
        state: touch
        mode: 0777
      when: not stat_result.stat.exists
      register: output

    - name: check if k8s join master script exists
      stat:
        path: "/home/{{ admin }}/k8s_join_master.sh"
      register: stat_result

    - name: create k8s join master script
      file:
        path: "/home/{{ admin }}/k8s_join_master.sh"
        state: touch
        mode: 0777
      register: output

    - name: check if k8s join worker script exists
      stat:
        path: "/home/{{ admin }}/k8s_join_worker.sh"
      register: stat_result

    - name: create k8s join worker script
      file:
        path: "/home/{{ admin }}/k8s_join_worker.sh"
        state: touch
        mode: 0777
      register: output

    - name: kubeadm init
      shell: "kubeadm init --control-plane-endpoint {{ master_ip }}:6443 --upload-certs --pod-network-cidr \"10.244.0.0/16\" >> /home/{{ admin }}/k8s_log.sh"
      register: output

    - name: add join master command in its script (1)
      shell: "echo \"#!/bin/bash\" > /home/{{ admin }}/k8s_join_master.sh"
      register: output

    - name: add join master command in its script (2)
      shell: "sed -n \'/kubeadm join/,/control/p\' /home/{{ admin }}/k8s_log.sh | head -n 3 >> /home/{{ admin }}/k8s_join_master.sh"
      register: output

    - name: add join worker command in its script (1)
      shell: "echo \"#!/bin/bash\" > /home/{{ admin }}/k8s_join_worker.sh"
      register: output

    - name: add join worker command in its script (2)
      shell: "sed -n \'/kubeadm join/,/control/p\' /home/{{ admin }}/k8s_log.sh | tail -n 2 >> /home/{{ admin }}/k8s_join_worker.sh"
      register: output

    - name: check if master root's $HOME/.kube exists
      stat:
        path: $HOME/.kube
      register: stat_result

    - name: create master root's $HOME/.kube directory
      file:
        path: $HOME/.kube
        state: directory
      when: not stat_result.stat.exists
      register: output

    - name: check if master admin's $HOME/.kube exists
      become_user: "{{ admin }}"
      stat:
        path: $HOME/.kube
      register: stat_result

    - name: create master admin's $HOME/.kube directory
      become_user: "{{ admin }}"
      file:
        path: $HOME/.kube
        state: directory
      when: not stat_result.stat.exists
      register: output

    - name: copy /etc/kubernetes/admin.conf as master root's $HOME/.kube/config and change owner
      copy:
        src: /etc/kubernetes/admin.conf
        dest: $HOME/.kube/config
        owner: root
        group: root
        remote_src: yes
      register: output

    - name: copy /etc/kubernetes/admin.conf as master admin's $HOME/.kube/config and change owner
      copy:
        src: /etc/kubernetes/admin.conf
        dest: "/home/{{ admin }}/.kube/config"
        owner: "{{ admin }}"
        group: "{{ admin }}"
        remote_src: yes
      register: output

    - name: install flannel
      become: yes
      become_user: root
      shell: kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
      args:
        chdir: "/home/{{ admin }}"
      register: output

    - name: download helm installation script
      become_user: "{{ admin }}"
      get_url:
        url: https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
        dest: $HOME/get_helm.sh
        mode: 0777
      register: output

    - name: install helm
      shell: "/home/{{ admin }}/get_helm.sh"
      register: output
